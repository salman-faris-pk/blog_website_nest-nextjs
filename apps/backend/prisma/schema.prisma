// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String @unique
  bio       String?
  avatar    String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
  comments  Comment[]
  likes     Like[]

}

model Post {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  slug      String? @unique
  title     String
  content   String
  thumbnail String?
  published Boolean
  authorId  String @db.ObjectId
  author    User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments  Comment[]
  tags       PostTag[] 
  likes     Like[]
}


model PostTag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  tagId  String @db.ObjectId
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
}


model Comment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  postId    String @db.ObjectId
  post      Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String @db.ObjectId
  author    User @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  posts PostTag[]
}

model Like {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  postId  String @db.ObjectId
  user    User @relation(fields: [userId], references: [id])
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
}